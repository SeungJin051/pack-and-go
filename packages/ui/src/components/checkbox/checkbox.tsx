'use client';

import { forwardRef, useId as useReactId } from 'react';
import type { ChangeEventHandler, InputHTMLAttributes } from 'react';

import { clsx } from 'clsx';

/**
 * 체크박스 컴포넌트의 props 타입 정의
 * HTML input 요소의 기본 속성에서 일부를 재정의하여 사용
 */
export interface CheckboxProps
  extends Omit<
    InputHTMLAttributes<HTMLInputElement>, // HTML input 요소의 기본 속성들
    'onChange' | 'className' | 'id' | 'checked' | 'disabled' // 아래에서 재정의할 속성들 제외
  > {
  label?: string; // 체크박스 옆에 표시될 텍스트
  checked?: boolean; // 체크박스의 선택 상태
  id?: string; // 체크박스의 ID (없으면 자동 생성)
  disabled?: boolean; // 비활성화 상태
  onChange?: ChangeEventHandler<HTMLInputElement>; // 값 변경 시 호출될 함수 (빈 함수라도 추가 필요 아니면 에러발생)
  className?: string; // Wrapper div에 적용될 className
  inputClassName?: string; // input 요소에만 특별히 추가할 className
  isRadio?: boolean;
}

/**
 * 커스텀 체크박스 컴포넌트
 *
 * 사용 예시:
 * <Checkbox
 *   label="동의합니다"
 *   checked={isChecked}
 *   onChange={(e) => setIsChecked(e.target.checked)}
 * />
 */
export const Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(
  (
    {
      label,
      checked,
      id: propId, // props로 받는 id는 propId로 변경 (useId와 이름 충돌 방지)
      disabled,
      onChange,
      className, // Wrapper div 용 className
      inputClassName, // input 용 className
      isRadio,
      ...rest
    },
    ref // 부모 컴포넌트에서 직접 input 요소에 접근할 수 있게 해주는 ref
  ) => {
    // React의 useId를 사용하여 안정적인 고유 ID 생성 (SSR 환경에서도 안전)
    const autoGeneratedId = useReactId();

    // prop으로 id가 제공되면 그것을 사용, 아니면 자동 생성 ID 사용
    const checkboxId = propId || autoGeneratedId;

    return (
      // 체크박스와 라벨을 감싸는 컨테이너
      <div className={clsx('flex items-center', className)}>
        {/* 실제 체크박스 input 요소 */}
        <input
          ref={ref}
          type={isRadio ? 'radio' : 'checkbox'}
          id={checkboxId} // label의 htmlFor와 연결하기 위한 ID
          checked={checked}
          disabled={disabled}
          onChange={onChange}
          className={clsx(
            // 기본 스타일
            'h-4 w-4 border-gray-300 bg-gray-100 text-blue-600',
            'rounded-sm', // 모서리 약간 둥글게
            // 다크 모드 스타일
            'dark:border-gray-600 dark:bg-gray-700',
            // 커서 스타일
            'cursor-pointer',
            // 비활성화 상태일 때 스타일
            disabled && 'cursor-not-allowed opacity-50',
            // 추가 커스텀 스타일
            inputClassName
          )}
          {...rest} // 그 외 추가 props 전달 (예: name, value 등)
        />

        {/* 체크박스 라벨 */}
        <label
          htmlFor={checkboxId} // input과 연결 (클릭 시 체크박스 토글)
          className={clsx(
            // 기본 스타일
            'ms-2 text-sm font-medium text-gray-900 dark:text-gray-300',
            // label이 없을 때 스크린리더 전용으로 설정 (접근성)
            !label && 'sr-only',
            // 비활성화 상태 클래스
            disabled && 'cursor-not-allowed opacity-75'
          )}
        >
          {label || ''} {/* label이 없으면 빈 문자열 */}
        </label>
      </div>
    );
  }
);

// 개발 도구에서 컴포넌트 이름을 표시하기 위한 설정 (디버깅에 유용)
Checkbox.displayName = 'Checkbox';

export default Checkbox;
